#!/usr/bin/env python3
"""
Script de Migra√ß√£o para Sistema de Captcha - Sistema Guardi√£o BETA
Executa a migra√ß√£o do banco de dados para adicionar o sistema de captcha
"""

import asyncio
import logging
import sys
from database.connection import db_manager

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def run_captcha_migration():
    """Executa a migra√ß√£o do sistema de captcha"""
    try:
        logger.info("üöÄ Iniciando migra√ß√£o do sistema de captcha...")
        
        # Inicializa o pool de conex√µes
        if not db_manager.pool:
            await db_manager.initialize_pool()
            logger.info("‚úÖ Pool de conex√µes inicializado")
        
        # L√™ o arquivo de migra√ß√£o
        with open('database/migrate_captcha_system.sql', 'r', encoding='utf-8') as f:
            migration_sql = f.read()
        
        # Executa a migra√ß√£o
        await db_manager.execute_command(migration_sql)
        logger.info("‚úÖ Migra√ß√£o do sistema de captcha executada com sucesso")
        
        # Verifica se a tabela foi criada
        check_query = """
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'captchas_guardioes'
            )
        """
        table_exists = await db_manager.execute_scalar(check_query)
        
        if table_exists:
            logger.info("‚úÖ Tabela 'captchas_guardioes' criada com sucesso")
        else:
            logger.error("‚ùå Tabela 'captchas_guardioes' n√£o foi criada")
            return False
        
        # Verifica se os √≠ndices foram criados
        indexes_query = """
            SELECT indexname 
            FROM pg_indexes 
            WHERE tablename = 'captchas_guardioes'
        """
        indexes = await db_manager.execute_query(indexes_query)
        
        logger.info(f"‚úÖ {len(indexes)} √≠ndices criados para a tabela")
        for index in indexes:
            logger.info(f"  - {index['indexname']}")
        
        logger.info("üéâ Migra√ß√£o do sistema de captcha conclu√≠da com sucesso!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante a migra√ß√£o: {e}")
        return False
    
    finally:
        # Fecha o pool de conex√µes
        if db_manager.pool:
            await db_manager.close_pool()
            logger.info("‚úÖ Pool de conex√µes fechado")


async def main():
    """Fun√ß√£o principal"""
    try:
        success = await run_captcha_migration()
        if success:
            logger.info("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
            sys.exit(0)
        else:
            logger.error("‚ùå Migra√ß√£o falhou!")
            sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())

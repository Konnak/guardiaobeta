"""
Sistema de Experi√™ncia - Guardi√£o BETA
Gerencia t√≠tulos e ranks baseados na experi√™ncia dos usu√°rios
"""

from typing import Dict, Tuple


def get_experience_rank(xp: int) -> str:
    """
    Determina o t√≠tulo de experi√™ncia baseado na quantidade de XP
    
    Args:
        xp: Pontos de experi√™ncia do usu√°rio
        
    Returns:
        T√≠tulo correspondente ao n√≠vel de experi√™ncia
    """
    # Sistema de ranks baseado em faixas de experi√™ncia
    experience_ranks = [
        (0, "Novato"),
        (101, "Aprendiz"),
        (201, "Iniciante"),
        (301, "Recruta"),
        (401, "Principiante"),
        (601, "Observador"),
        (801, "Vigia"),
        (1001, "Aspirante"),
        (1301, "Cadete"),
        (1601, "Sentinela"),
        (2001, "Patrulheiro"),
        (2601, "Agente"),
        (3201, "Defensor"),
        (3801, "Escudeiro"),
        (4601, "Experiente"),
        (5501, "Protetor"),
        (6501, "Guardi√£o J√∫nior"),
        (7801, "Cavaleiro"),
        (9001, "Profissional"),
        (10501, "Vanguarda"),
        (12001, "Veterano"),
        (14501, "Elite"),
        (17001, "Mestre de Campo"),
        (20001, "Estrategista"),
        (23501, "Guardi√£o Mestre"),
        (27001, "Comandante"),
        (31001, "Chefe de Patrulha"),
        (35501, "Protetor Supremo"),
        (40001, "General da Guarda"),
        (45501, "Guardi√£o de Ferro"),
        (51001, "Guardi√£o de A√ßo"),
        (57501, "Guardi√£o Lend√°rio"),
        (64001, "Guardi√£o √âpico"),
        (71001, "Guardi√£o Real"),
        (78501, "Guardi√£o Anci√£o"),
        (86001, "Guardi√£o Supremo"),
        (94001, "Guardi√£o Sagrado"),
        (102001, "Guardi√£o Imortal"),
        (110001, "Guardi√£o Celestial"),
        (118001, "Guardi√£o das Sombras"),
        (126001, "Guardi√£o da Luz"),
        (134501, "Guardi√£o C√≥smico"),
        (143001, "Guardi√£o Estelar"),
        (152001, "Guardi√£o Dimensional"),
        (161501, "Guardi√£o Supremo de Elite"),
        (171001, "Guardi√£o da Eternidade"),
        (181001, "Guardi√£o Infinito"),
        (191001, "Guardi√£o Divino"),
        (200001, "Guardi√£o Absoluto"),
        (225001, "Guardi√£o Eterno")
    ]
    
    # Encontra o t√≠tulo correspondente
    current_rank = "Novato"
    for min_xp, rank in experience_ranks:
        if xp >= min_xp:
            current_rank = rank
        else:
            break
    
    return current_rank


def get_experience_progress(xp: int) -> Tuple[int, int, float]:
    """
    Calcula o progresso do usu√°rio no rank atual
    
    Args:
        xp: Pontos de experi√™ncia do usu√°rio
        
    Returns:
        Tupla com (xp_atual, xp_proximo_rank, porcentagem_progresso)
    """
    # Faixas de experi√™ncia (mesmas do get_experience_rank)
    experience_ranks = [
        (0, "Novato"),
        (101, "Aprendiz"),
        (201, "Iniciante"),
        (301, "Recruta"),
        (401, "Principiante"),
        (601, "Observador"),
        (801, "Vigia"),
        (1001, "Aspirante"),
        (1301, "Cadete"),
        (1601, "Sentinela"),
        (2001, "Patrulheiro"),
        (2601, "Agente"),
        (3201, "Defensor"),
        (3801, "Escudeiro"),
        (4601, "Experiente"),
        (5501, "Protetor"),
        (6501, "Guardi√£o J√∫nior"),
        (7801, "Cavaleiro"),
        (9001, "Profissional"),
        (10501, "Vanguarda"),
        (12001, "Veterano"),
        (14501, "Elite"),
        (17001, "Mestre de Campo"),
        (20001, "Estrategista"),
        (23501, "Guardi√£o Mestre"),
        (27001, "Comandante"),
        (31001, "Chefe de Patrulha"),
        (35501, "Protetor Supremo"),
        (40001, "General da Guarda"),
        (45501, "Guardi√£o de Ferro"),
        (51001, "Guardi√£o de A√ßo"),
        (57501, "Guardi√£o Lend√°rio"),
        (64001, "Guardi√£o √âpico"),
        (71001, "Guardi√£o Real"),
        (78501, "Guardi√£o Anci√£o"),
        (86001, "Guardi√£o Supremo"),
        (94001, "Guardi√£o Sagrado"),
        (102001, "Guardi√£o Imortal"),
        (110001, "Guardi√£o Celestial"),
        (118001, "Guardi√£o das Sombras"),
        (126001, "Guardi√£o da Luz"),
        (134501, "Guardi√£o C√≥smico"),
        (143001, "Guardi√£o Estelar"),
        (152001, "Guardi√£o Dimensional"),
        (161501, "Guardi√£o Supremo de Elite"),
        (171001, "Guardi√£o da Eternidade"),
        (181001, "Guardi√£o Infinito"),
        (191001, "Guardi√£o Divino"),
        (200001, "Guardi√£o Absoluto"),
        (225001, "Guardi√£o Eterno")
    ]
    
    # Encontra o rank atual e o pr√≥ximo
    current_min_xp = 0
    next_min_xp = 101
    
    for i, (min_xp, rank) in enumerate(experience_ranks):
        if xp >= min_xp:
            current_min_xp = min_xp
            # Pr√≥ximo rank ou m√°ximo se for o √∫ltimo
            if i + 1 < len(experience_ranks):
                next_min_xp = experience_ranks[i + 1][0]
            else:
                next_min_xp = experience_ranks[-1][0]  # √öltimo rank
        else:
            break
    
    # Calcula o progresso
    xp_in_current_rank = xp - current_min_xp
    xp_needed_for_next = next_min_xp - current_min_xp
    progress_percentage = (xp_in_current_rank / xp_needed_for_next) * 100 if xp_needed_for_next > 0 else 100
    
    return xp_in_current_rank, xp_needed_for_next, progress_percentage


def get_rank_emoji(rank: str) -> str:
    """
    Retorna o emoji correspondente ao rank
    
    Args:
        rank: Nome do rank
        
    Returns:
        Emoji correspondente ao rank
    """
    rank_emojis = {
        # Ranks Iniciais (0-1000)
        "Novato": "üÜï",
        "Aprendiz": "üìö",
        "Iniciante": "üå±",
        "Recruta": "üéñÔ∏è",
        "Principiante": "‚≠ê",
        "Observador": "üëÅÔ∏è",
        "Vigia": "üëÄ",
        "Aspirante": "üéØ",
        
        # Ranks Intermedi√°rios (1001-5000)
        "Cadete": "üéì",
        "Sentinela": "üõ°Ô∏è",
        "Patrulheiro": "üö∂",
        "Agente": "üïµÔ∏è",
        "Defensor": "‚öîÔ∏è",
        "Escudeiro": "üõ°Ô∏è",
        "Experiente": "üß†",
        "Protetor": "üõ°Ô∏è",
        "Guardi√£o J√∫nior": "üë∂",
        "Cavaleiro": "üèá",
        "Profissional": "üíº",
        "Vanguarda": "‚ö°",
        "Veterano": "üéñÔ∏è",
        
        # Ranks Avan√ßados (5001-15000)
        "Elite": "üíé",
        "Mestre de Campo": "üèïÔ∏è",
        "Estrategista": "üß©",
        "Guardi√£o Mestre": "üéì",
        "Comandante": "üëë",
        "Chefe de Patrulha": "üöî",
        "Protetor Supremo": "üõ°Ô∏è",
        "General da Guarda": "üéñÔ∏è",
        
        # Ranks √âpicos (15001-50000)
        "Guardi√£o de Ferro": "‚öíÔ∏è",
        "Guardi√£o de A√ßo": "üî®",
        "Guardi√£o Lend√°rio": "üåü",
        "Guardi√£o √âpico": "‚ö°",
        "Guardi√£o Real": "üëë",
        "Guardi√£o Anci√£o": "üßô",
        "Guardi√£o Supremo": "üëë",
        "Guardi√£o Sagrado": "‚ú®",
        "Guardi√£o Imortal": "üíÄ",
        "Guardi√£o Celestial": "‚òÅÔ∏è",
        "Guardi√£o das Sombras": "üåë",
        "Guardi√£o da Luz": "‚òÄÔ∏è",
        "Guardi√£o C√≥smico": "üåå",
        "Guardi√£o Estelar": "‚≠ê",
        "Guardi√£o Dimensional": "üåÄ",
        "Guardi√£o Supremo de Elite": "üí´",
        "Guardi√£o da Eternidade": "‚ôæÔ∏è",
        "Guardi√£o Infinito": "‚àû",
        "Guardi√£o Divino": "üôè",
        "Guardi√£o Absoluto": "‚ö°",
        "Guardi√£o Eterno": "‚ôæÔ∏è"
    }
    
    return rank_emojis.get(rank, "üÜï")


def calculate_experience_reward(vote_type: str, is_correct: bool = True) -> int:
    """
    Calcula a recompensa de experi√™ncia baseada no tipo de voto
    
    Args:
        vote_type: Tipo do voto ("OK!", "Intimidou", "Grave")
        is_correct: Se o voto foi correto (para sistema de feedback)
        
    Returns:
        Quantidade de experi√™ncia a ser concedida
    """
    base_rewards = {
        "OK!": 10,
        "Intimidou": 15,
        "Grave": 20
    }
    
    base_xp = base_rewards.get(vote_type, 10)
    
    # B√¥nus por acerto (se implementado sistema de feedback)
    if is_correct:
        return base_xp
    else:
        return max(1, base_xp // 2)  # Penalidade por erro


def convert_points_to_xp(points: int) -> int:
    """
    Converte pontos para experi√™ncia
    
    Args:
        points: Quantidade de pontos
        
    Returns:
        Quantidade de XP equivalente (1 ponto = 2 XP)
    """
    return points * 2


def calculate_xp_from_points_change(points_change: int) -> int:
    """
    Calcula XP a ser adicionado/removido baseado na mudan√ßa de pontos
    
    Args:
        points_change: Mudan√ßa nos pontos (positivo ou negativo)
        
    Returns:
        XP a ser adicionado/removido
    """
    return points_change * 2


def get_rank_requirements() -> Dict[str, Dict[str, int]]:
    """
    Retorna os requisitos de cada rank
    
    Returns:
        Dicion√°rio com informa√ß√µes dos ranks
    """
    return {
        # Ranks Iniciais
        "Novato": {"min_xp": 0, "description": "Iniciando a jornada como Guardi√£o"},
        "Aprendiz": {"min_xp": 101, "description": "Aprendendo os fundamentos da modera√ß√£o"},
        "Iniciante": {"min_xp": 201, "description": "Primeiros passos na modera√ß√£o"},
        "Recruta": {"min_xp": 301, "description": "Demonstrando conhecimento b√°sico"},
        "Principiante": {"min_xp": 401, "description": "Desenvolvendo habilidades moderativas"},
        "Observador": {"min_xp": 601, "description": "Observando e aprendendo"},
        "Vigia": {"min_xp": 801, "description": "Vigilante ativo da comunidade"},
        "Aspirante": {"min_xp": 1001, "description": "Aspirando a se tornar Guardi√£o"},
        
        # Ranks Intermedi√°rios
        "Cadete": {"min_xp": 1301, "description": "Cadete em treinamento avan√ßado"},
        "Sentinela": {"min_xp": 1601, "description": "Sentinela da ordem"},
        "Patrulheiro": {"min_xp": 2001, "description": "Patrulheiro experiente"},
        "Agente": {"min_xp": 2601, "description": "Agente especializado"},
        "Defensor": {"min_xp": 3201, "description": "Defensor da comunidade"},
        "Escudeiro": {"min_xp": 3801, "description": "Escudeiro dedicado"},
        "Experiente": {"min_xp": 4601, "description": "Guardi√£o experiente"},
        "Protetor": {"min_xp": 5501, "description": "Protetor da paz"},
        "Guardi√£o J√∫nior": {"min_xp": 6501, "description": "Guardi√£o j√∫nior oficial"},
        "Cavaleiro": {"min_xp": 7801, "description": "Cavaleiro da justi√ßa"},
        "Profissional": {"min_xp": 9001, "description": "Profissional da modera√ß√£o"},
        "Vanguarda": {"min_xp": 10501, "description": "Vanguarda da prote√ß√£o"},
        "Veterano": {"min_xp": 12001, "description": "Veterano experiente"},
        
        # Ranks Avan√ßados
        "Elite": {"min_xp": 14501, "description": "Elite da guarda comunit√°ria"},
        "Mestre de Campo": {"min_xp": 17001, "description": "Mestre de campo experiente"},
        "Estrategista": {"min_xp": 20001, "description": "Estrategista da modera√ß√£o"},
        "Guardi√£o Mestre": {"min_xp": 23501, "description": "Mestre entre os Guardi√µes"},
        "Comandante": {"min_xp": 27001, "description": "Comandante da guarda"},
        "Chefe de Patrulha": {"min_xp": 31001, "description": "Chefe de patrulha"},
        "Protetor Supremo": {"min_xp": 35501, "description": "Protetor supremo"},
        "General da Guarda": {"min_xp": 40001, "description": "General da guarda"},
        
        # Ranks √âpicos
        "Guardi√£o de Ferro": {"min_xp": 45501, "description": "Guardi√£o de ferro inquebr√°vel"},
        "Guardi√£o de A√ßo": {"min_xp": 51001, "description": "Guardi√£o de a√ßo resistente"},
        "Guardi√£o Lend√°rio": {"min_xp": 57501, "description": "Guardi√£o lend√°rio"},
        "Guardi√£o √âpico": {"min_xp": 64001, "description": "Guardi√£o √©pico"},
        "Guardi√£o Real": {"min_xp": 71001, "description": "Guardi√£o real"},
        "Guardi√£o Anci√£o": {"min_xp": 78501, "description": "Guardi√£o anci√£o"},
        "Guardi√£o Supremo": {"min_xp": 86001, "description": "Guardi√£o supremo"},
        "Guardi√£o Sagrado": {"min_xp": 94001, "description": "Guardi√£o sagrado"},
        "Guardi√£o Imortal": {"min_xp": 102001, "description": "Guardi√£o imortal"},
        "Guardi√£o Celestial": {"min_xp": 110001, "description": "Guardi√£o celestial"},
        "Guardi√£o das Sombras": {"min_xp": 118001, "description": "Guardi√£o das sombras"},
        "Guardi√£o da Luz": {"min_xp": 126001, "description": "Guardi√£o da luz"},
        "Guardi√£o C√≥smico": {"min_xp": 134501, "description": "Guardi√£o c√≥smico"},
        "Guardi√£o Estelar": {"min_xp": 143001, "description": "Guardi√£o estelar"},
        "Guardi√£o Dimensional": {"min_xp": 152001, "description": "Guardi√£o dimensional"},
        "Guardi√£o Supremo de Elite": {"min_xp": 161501, "description": "Guardi√£o supremo de elite"},
        "Guardi√£o da Eternidade": {"min_xp": 171001, "description": "Guardi√£o da eternidade"},
        "Guardi√£o Infinito": {"min_xp": 181001, "description": "Guardi√£o infinito"},
        "Guardi√£o Divino": {"min_xp": 191001, "description": "Guardi√£o divino"},
        "Guardi√£o Absoluto": {"min_xp": 200001, "description": "Guardi√£o absoluto"},
        "Guardi√£o Eterno": {"min_xp": 225001, "description": "Guardi√£o eterno - O mais alto t√≠tulo alcan√ß√°vel"}
    }


def format_experience_display(xp: int) -> str:
    """
    Formata a exibi√ß√£o da experi√™ncia de forma amig√°vel
    
    Args:
        xp: Pontos de experi√™ncia
        
    Returns:
        String formatada com rank, emoji e progresso
    """
    rank = get_experience_rank(xp)
    emoji = get_rank_emoji(rank)
    current_xp, needed_xp, progress = get_experience_progress(xp)
    
    if rank == "Guardi√£o Supremo":
        return f"{emoji} **{rank}** (M√°ximo)"
    
    return f"{emoji} **{rank}** ({current_xp}/{needed_xp} XP - {progress:.1f}%)"


# Fun√ß√£o utilit√°ria para debug e testes
def test_experience_system():
    """Fun√ß√£o de teste para verificar o sistema de experi√™ncia"""
    test_xp_values = [0, 50, 150, 300, 600, 1200, 2500, 6000, 8000, 15000, 25000, 50000, 100000, 200000, 250000]
    
    print("=== Teste do Sistema de Experi√™ncia ===")
    for xp in test_xp_values:
        rank = get_experience_rank(xp)
        emoji = get_rank_emoji(rank)
        current, needed, progress = get_experience_progress(xp)
        formatted = format_experience_display(xp)
        
        print(f"XP: {xp} | {emoji} {rank} | Progresso: {current}/{needed} ({progress:.1f}%)")
        print(f"Formatado: {formatted}")
        print("-" * 80)


if __name__ == "__main__":
    test_experience_system()
